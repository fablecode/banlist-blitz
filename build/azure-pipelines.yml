# Define the name of the pipeline
name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(GitVersion.SemVer)

# Define the trigger for the pipeline
trigger:
  branches:
    include:
      - main
      - feature/*
      - features/*
      - bugfix/*
      - bugfixes/*
      - user/*
      - users/*
  paths:
    exclude:
    - README.md

pool:
  vmImage: windows-latest

workspace:
  clean: all # what to clean up before the job runs

# Define variables used throughout the pipeline
variables:
  System.Debug: true
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- checkout: self
  fetchDepth: 0 # Disable shallow fetch

# Step 1: Install the specified .NET SDK version
- task: UseDotNet@2
  displayName: 'Use DotNet SDK 8.x'
  inputs:
    version: '8.x'                # Specify the .NET SDK version to install (e.g., .NET 8.x).

# Step 1: Install the latest GitVersion global tool
- script: dotnet tool install --global GitVersion.Tool
  displayName: 'Install GitVersion Tool'

# Step 2: Add GitVersion to the PATH
- script: echo "##vso[task.setvariable variable=PATH]$(PATH):$(Agent.ToolsDirectory)/dotnet/tools"
  displayName: 'Add GitVersion to PATH'

# Step 3: Restore NuGet packages
- script: |
    dotnet restore
  displayName: 'Restore NuGet Packages'

# Step 4: Build the project targeting multiple frameworks
- script: |
    dotnet build --configuration $(buildConfiguration) --no-restore
  displayName: 'Build Project'

# Step 5: Run NUnit tests
- script: |
    dotnet test --configuration $(buildConfiguration) --no-build --verbosity normal
  displayName: 'Run Tests'

# Step 6: Create a NuGet package from the project
- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPack: '**/BanlistBlitz.csproj'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'GitVersion.FullSemVer'  # Use the version generated by GitVersion
    configuration: $(buildConfiguration)
    outputDir: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Create NuGet Package'

# Step 7: Publish the NuGet package to Azure Artifacts
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'  # Path to the package
    artifactName: 'nuget-package'  # Name of the artifact to publish
    publishLocation: 'pipeline'  # Publish location (pipeline scope)
  displayName: 'Publish NuGet Package to Azure Artifacts'
